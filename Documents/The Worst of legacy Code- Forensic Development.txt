The worst of Legacy Code: Forensic Development
==============================================

This session will teach 2 techniques that not only individually help to tackle the more complex parts of dealing with legacy code, but when combined act as the most powerful technique I have yet to find for the worst legacy code situations.

After exploring these two techniques separately we will dive into how they work together to solve a hideous piece of legacy, written in Russian, without access to the underlaying objects, in an object that can not even be instantiated because of a dependency in the underlying object it is extending.

If firefighting or legacy code is part of your job, this is one session not to be missed.

The high level view of what we are doing [video](https://www.youtube.com/watch?v=yAKL6rlEF_s).

Using the two techniques (which are designed for immediate job implementation), we solve the problem as a group in a matter of minutes.

Process/Mechanics
-----------------
* Introduction of the problem - A skit about the boss dumping a critical bug which is embedded in completely unfamiliar code on an engineer late on a Friday night. We've all been there.
* Code excerpt - We hand out the code containing the boss's bug. Audience laughs in disbelief by the fact that the code is written in Russian!
* Discussion of the two methods for executing code that cannot be run
  * Method #1: Peel-Mango example – tactile demonstration that even though the mango has thick skin we can use a very simple tool (peeler) to remove the skin and expose the fruit's flesh. Live code example – we take a small piece of unrelated code and show how the peel technique works in practice to allow an insertion point via which we can get into it to run it.
  * Method #2: Slice-Mango example – when presenter tries to take a second bite of the mango he bites into the pit and notes that it wasn't just the peel which was problematic. So he takes another simple tool (a knife) and slices away a chunk of the fruit's flesh. Live code example – we show the slice in practice using a different piece of unrelated code and how to mock out the calls that make it unrunnable.
* Summary Peel & Slice Techniques using animated slides.

Back to the main Problem - The boss checks in to see the progress the engineer is making bringing us back to the original problem.

Solving the Problem
-------------------
* Discovery - We use the peel & slice until the entire block of code is running (proven by the cover tool).
* Confirmation - Now that it is running we wire up the bug scenario to prove that it is in fact failing.
* Debugger - Now that we have code that can run, we need to step through it to see what is going on. Find the 1st bug - Inevitably the first bug is discovered by someone in the audience, and is fixed "Good job, you get to go home on Friday night,"
* Prove the code is fixed - Because we have tests, We can now run them to show the bug is fixed - but the test don't pass, it's compound bug. "…But, Find the 2nd bug - we walk though the code again to discover the second bug & fix it.
* Prove the code is fixed - Great now it actually is!

We then remind the audience that even though we solved the problems quickly and simply, when first presented the problem seems so ridiculously hard that they burst into laughter.

Learning outcomes - Two powerful techniques for fixing legacy code:
-------------------------------------------------------------------
* The Peel – Removing a thin layer to allow access to the code - also called the Delegator pattern.
* The Slice – Mocking out underlying code calls so code can be run despite dependencies.
* How to combine these two methods to isolate and fix any piece of legacy code.
* Learn to use these techniques to actually gain understanding of the code, rather than needing to understand the code beforehand.

Here is the code we are going to fix: [attach code]
